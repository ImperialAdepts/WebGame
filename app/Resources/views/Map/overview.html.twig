{% extends 'Settlement/base.html.twig' %}

{% block javascripts %}
    <script src="/js/three.min.js"></script>
    <script src="/js/TrackballControls.js"></script>
    <script src="/js/CSS3DRenderer.js"></script>

	<script>
		var camera, scene, renderer;
		var scene2, renderer2;
		var controls;
		var peaks;
		var regionTriangles;
		var planetDiameter;
		var colorsByTerrainTypes = {
		    'dead': 0x999966,
            'plain': 0xffff99,
            'fertile': 0x669900,
            'rock': 0x6b6b47,
            'tundra': 0x26734d,
            'swamp': 0x264d00,
            'frozen': 0xe6fffa,
            'water': 0x0000b3
        };
		var peakA;
		var peakB;
		var peakC;

        var xhr = new XMLHttpRequest();
        xhr.open('GET', 'http://localhost:2000/map/ajax', false);
        xhr.setRequestHeader("Content-Type", "text/xml");
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status == 200) {
                    var data=xhr.responseText;
                    var jsonResponse = JSON.parse(data);
                    peaks = jsonResponse["peaks"];
                    regionTriangles = jsonResponse["regions"];
                    planetDiameter = jsonResponse["planetDiameter"];
                    init();
                    animate();
                }
            }
        };
        xhr.send(null);
		function init() {
			camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );
			camera.position.set( 200, 200, 200 );
			controls = new THREE.TrackballControls( camera );
			scene = new THREE.Scene();
			scene.background = new THREE.Color( 0xf0f0f0 );
			scene2 = new THREE.Scene();

			var region;
			for(var i=0; i<regionTriangles.length; i++) {
                region = regionTriangles[i];

				renderRegion(scene, region);
				renderRegionBorders(scene, region);
			}
			//
			renderer = new THREE.WebGLRenderer( { antialias: true } );
			renderer.setPixelRatio( window.devicePixelRatio );
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );
			// getElementsByClassName('map-canvas').
			renderer2 = new THREE.CSS3DRenderer();
			renderer2.setSize( window.innerWidth, window.innerHeight );
			renderer2.domElement.style.position = 'absolute';
			renderer2.domElement.style.top = 0;
			document.body.appendChild( renderer2.domElement );
		}

		function renderRegion(scene, region) {
			var color = colorsByTerrainTypes[region["type"]];
			// if (region["settlement"] == null) {
				var material = new THREE.MeshBasicMaterial({
					color: color,
					wireframe: false,
					wireframeLinewidth: 1,
					side: THREE.DoubleSide
				});
			// } else {
			// 	var material = new THREE.MeshBasicMaterial({
			// 		color: 0x000,
			// 		wireframe: false,
			// 		wireframeLinewidth: 1,
			// 		side: THREE.DoubleSide
			// 	});
			// }
			var geometry = new THREE.Geometry();

			peakA = peaks[region["peaks"][0]];
			peakB = peaks[region["peaks"][1]];
			peakC = peaks[region["peaks"][2]];
			geometry.vertices.push(
					new THREE.Vector3(peakA["projection"]["x"], peakA["projection"]["y"], peakA["projection"]["z"]),
					new THREE.Vector3(peakB["projection"]["x"], peakB["projection"]["y"], peakB["projection"]["z"]),
					new THREE.Vector3(peakC["projection"]["x"], peakC["projection"]["y"], peakC["projection"]["z"])
			);

			geometry.faces.push( new THREE.Face3( 0, 1, 2 ) );
			geometry.computeFaceNormals();

			var mesh = new THREE.Mesh( geometry, material );
			scene.add( mesh );
		}

		function renderRegionBorders(scene, region) {
			var wireframe = new THREE.MeshBasicMaterial( { color: 0x000, wireframe: true, wireframeLinewidth: 1, side: THREE.DoubleSide } );
			var geometry = new THREE.Geometry();

			peakA = peaks[region["peaks"][0]];
			peakB = peaks[region["peaks"][1]];
			peakC = peaks[region["peaks"][2]];
			geometry.vertices.push(
					new THREE.Vector3(peakA["projection"]["x"], peakA["projection"]["y"], peakA["projection"]["z"]),
					new THREE.Vector3(peakB["projection"]["x"], peakB["projection"]["y"], peakB["projection"]["z"]),
					new THREE.Vector3(peakC["projection"]["x"], peakC["projection"]["y"], peakC["projection"]["z"])
			);

			geometry.faces.push( new THREE.Face3( 0, 1, 2 ) );
			geometry.computeFaceNormals();

			var meshBorder = new THREE.Mesh( geometry, wireframe );
			scene.add( meshBorder );

			if (region["settlement"] != null) {
				console.log(region["settlement"]);
				var myTerritory = new THREE.MeshBasicMaterial({
					color: 0xffa31a,
					wireframe: true,
					wireframeLinewidth: 3,
					side: THREE.DoubleSide
				});
				var foreignTerritory = new THREE.MeshBasicMaterial({
					color: 0xff0000,
					wireframe: true,
					wireframeLinewidth: 3,
					side: THREE.DoubleSide
				});
				var geometry = new THREE.Geometry();

				var peakProjectionA = region["settlement"]["borderPeaks"][0];
				var peakProjectionB = region["settlement"]["borderPeaks"][1];
				var peakProjectionC = region["settlement"]["borderPeaks"][2];
				geometry.vertices.push(
						new THREE.Vector3(peakProjectionA["x"], peakProjectionA["y"], peakProjectionA["z"]),
						new THREE.Vector3(peakProjectionB["x"], peakProjectionB["y"], peakProjectionB["z"]),
						new THREE.Vector3(peakProjectionC["x"], peakProjectionC["y"], peakProjectionC["z"])
				);

				geometry.faces.push(new THREE.Face3(0, 1, 2));
				geometry.computeFaceNormals();

				if (region["settlement"]["isMine"]) {
					var meshBorder = new THREE.Mesh(geometry, myTerritory);
				} else {
					var meshBorder = new THREE.Mesh(geometry, foreignTerritory);
				}
				scene.add(meshBorder);
			}
		}

		function animate() {
			requestAnimationFrame( animate );
			controls.update();
			renderer.render( scene, camera );
			renderer2.render( scene2, camera );
		}
	</script>
{% endblock %}

{% block subbody %}
	{% import _self as thistemplate %}

	<div class="map-canvas"></div>

	<style>
		body {
			background-color: #ffffff;
			margin: 0;
			overflow: hidden;
		}
		#info {
			position: absolute;
			top: 0px;
			width: 100%;
			color: #000000;
			padding: 5px;
			font-family: Monospace;
			font-size: 13px;
			text-align: center;
			z-index: 1;
		}
		a {
			color: #000000;
		}
	</style>
{% endblock %}

