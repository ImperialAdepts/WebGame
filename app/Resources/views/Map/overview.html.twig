{% extends 'Settlement/base.html.twig' %}

{% block javascripts %}
{#	{% javascripts#}
{#		'js/three.min.js',#}
{#		'js/CSS3DRenderer.js',#}
{#		'js/TrackballControls.js',#}
{#	%}#}
{#		<script src="{{ asset_url }}"></script>#}
{#	{% endjavascripts %}#}

		<script src="/js/three.min.js"></script>
		<script src="/js/TrackballControls.js"></script>
		<script src="/js/CSS3DRenderer.js"></script>

	<script>
		var camera, scene, renderer;
		var scene2, renderer2;
		var controls;
		var peaks = {
		    1: [20, 300],
		    2: [30, 40],
		    3: [40, 100],
		    5: [0, 0],
		    200: [300, 400],
        };
		var regionTriangles = [
            {'peaks': [1, 2, 200]},
            {'peaks': [1, 3, 5]},
            {'peaks': [1, 2, 3]},
        ];
		init();
		animate();
		function init() {
			camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );
			camera.position.set( 200, 200, 200 );
			controls = new THREE.TrackballControls( camera );
			scene = new THREE.Scene();
			scene.background = new THREE.Color( 0xf0f0f0 );
			scene2 = new THREE.Scene();
			var material = new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true, wireframeLinewidth: 1, side: THREE.DoubleSide } );
			//
			var region;
			for(var i=0; i<regionTriangles.length; i++) {
                region = regionTriangles[i];
                var geometry = new THREE.Geometry();
                console.debug(region);

                for (var y=0; y<region["peaks"].length; y++) {
                    var peakID = region["peaks"][y];
                    var peak = peaks[peakID];
                    console.debug(peak);
                    console.debug(peak[0]);
                    console.debug(peak[1]);
                    geometry.vertices.push(new THREE.Vector3(peak[0],peak[1],0));
                }

                geometry.faces.push( new THREE.Face3( 0, 1, 2 ) );
                geometry.computeFaceNormals();

				var mesh = new THREE.Mesh( geometry, material );
				scene.add( mesh );
			}
			//
			renderer = new THREE.WebGLRenderer( { antialias: true } );
			renderer.setPixelRatio( window.devicePixelRatio );
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );
			// getElementsByClassName('map-canvas').
			renderer2 = new THREE.CSS3DRenderer();
			renderer2.setSize( window.innerWidth, window.innerHeight );
			renderer2.domElement.style.position = 'absolute';
			renderer2.domElement.style.top = 0;
			document.body.appendChild( renderer2.domElement );
		}
		function animate() {
			requestAnimationFrame( animate );
			controls.update();
			renderer.render( scene, camera );
			renderer2.render( scene2, camera );
		}
	</script>
{% endblock %}

{% block subbody %}
	{% import _self as thistemplate %}

	<div class="map-canvas"></div>

	<style>
		body {
			background-color: #ffffff;
			margin: 0;
			overflow: hidden;
		}
		#info {
			position: absolute;
			top: 0px;
			width: 100%;
			color: #000000;
			padding: 5px;
			font-family: Monospace;
			font-size: 13px;
			text-align: center;
			z-index: 1;
		}
		a {
			color: #000000;
		}
	</style>
{#<style type="text/css">#}
{#	.right-line, .left-line {#}
{#		width: 100%;#}
{#		height: 110px;#}
{#	}#}
{#	.region {#}
{#		border-style: dashed;#}
{#		border-color: #563b15;#}
{#		width: 100px;#}
{#		height: 100px;#}
{#		margin-top: 0;#}
{#		margin-bottom: 0;#}
{#		/*margin-left: 20px;*/#}
{#		display: block;#}
{#		color: #333333;#}
{#	}#}
{#	.right-half {#}
{#		width: 45%;#}
{#		float: left;#}
{#		min-width: 500px;#}
{#	}#}
{#	.left-half {#}
{#		width: 45%;#}
{#		float: left;#}
{#		min-width: 500px;#}
{#	}#}

{#	.right-line .region {#}
{#		float: left;#}
{#	}#}
{#	.left-line .region {#}
{#		float: right;#}
{#	}#}
{#	.region.settlement.current-position {#}
{#		border-style: solid;#}
{#		border-color: darkorange;#}
{#		border-width: 3px;#}
{#		color: darkorange;#}
{#	}#}
{#	.fertility-dead {#}
{#		background-color: #636363;#}
{#	}#}
{#	.fertility-tundra {#}
{#		background-color: #496310;#}
{#	}#}
{#	.fertility-fertile {#}
{#		background-color: #6b9311;#}
{#	}#}
{#	.settlement {#}
{#		border-style: solid;#}
{#		border-color: #000000;#}
{#	}#}
{#</style>#}
{% endblock %}

{% macro region(region, currentHuman) %}
	{% set classes = '' %}
	{% if region.fertility < 10 %}
		{% set classes = classes ~ ' fertility-dead' %}
	{% endif %}
	{% if region.fertility >= 10 and region.fertility < 30 %}
		{% set classes = classes ~ ' fertility-tundra' %}
	{% endif %}
	{% if region.fertility >= 30 and region.fertility < 60 %}
		{% set classes = classes ~ ' fertility-fertile' %}
	{% endif %}

	{% if region.settlement is not null %}
		{% if region.settlement.owner == currentHuman %}
			{% set classes = classes ~ ' current-position' %}
		{% endif %}
		<a class="region settlement {{ classes }}" href="{{ path('settlement_dashboard', {'settlement': region.settlement.id}) }}">
			{{ region.settlement.owner.name }}
		</a>
	{% else %}
		<div class="region {{ classes }}">
			{{ region.coords }}
		</div>
	{% endif %}
{% endmacro %}


{% macro region_map(region) %}
	<table>
		<tbody>
		<tr>
			<td colspan="2">
				{{ region.coords }}:
				{% if region.settlement is not null %}
					<strong>{{ region.settlement.type }}</strong>
					<small> ruled by </small>
					<strong>{{ region.settlement.manager.name }}</strong>
				{% else %}
					nature
				{% endif %}
			</td>
			<td>History:</td>
			<td>
				{% if region.settlement is not null %}
					<a href="{{ path('settlement_dashboard', {'settlement': region.settlement.id}) }}">settlement_dashboard</a>
				{% endif %}
			</td>
		</tr>
		<tr>
			{#<td>#}
			{# TODO: opravit vypisovani maker #}
			{#{{ regioMacro.resource_deposit_info({r:region, h:human}) }}#}
			{#</td>#}
			{% if region.project is not null %}
				<td>
					Project {{ region.project.buildingBlueprint.description }}...
					<br/> {{ dump(region.project.missingResources) }}
					<ul>
						{% for notification in region.project.notifications %}
							<li>{{ notification.description }}</li>
						{% endfor %}
					</ul>
				</td>
			{% else %}
				<td>
					{#							{{ render(controller('PlanetBundle:Region:availableSettlements', {#}
					{#								'regionC': region.peakCenter.id,#}
					{#								'regionL': region.peakLeft.id,#}
					{#								'regionR': region.peakRight.id#}
					{#							})) }}#}
				</td>
			{% endif %}
			<td>
				<dt>Fertility:</dt>
				<dd>{{ region.fertility }}</dd>
			</td>
			<td>
				{% for project in region.projectHistory %}
					<h4>{{ project.buildingBlueprint.name }}</h4>
					<ul>
						{% for notification in project.notifications %}
							<li>{{ notification.description }}</li>
						{% endfor %}
					</ul>
				{% endfor %}
			</td>
			<td>
				{% if region.settlement is null %}
					<a href="{{ path('map_newcolony', {
						'regionC': region.peakCenter.id,
						'regionL': region.peakLeft.id,
						'regionR': region.peakRight.id
					}) }}">New colony</a>
				{% endif %}
			</td>
		</tr>
		</tbody>
	</table>
{% endmacro %}


